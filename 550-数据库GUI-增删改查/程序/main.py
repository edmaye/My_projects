# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '企业职业危害管理系统.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import uic
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import qdarkstyle,time
from database import Database,loadJson
from insert import Insert
import numpy as np
import inspect, re

def varname(p):
	for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]:
		m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line)
	if m:
		return m.group(1)

class GUI(QMainWindow):
    def __init__(self,password='qwe123456'):
        super(GUI, self).__init__()  # 调用父类的构造函数
        self.login_ok = False
        if password!='qwe123456':
            return
        uic.loadUi("./企业职业危害管理系统.ui", self)
        window_pale = QtGui.QPalette() 
        window_pale.setBrush(self.backgroundRole(), QtGui.QBrush(QtGui.QPixmap("1.jpg"))) 
        self.setPalette(window_pale)
        self.menu.triggered[QtWidgets.QAction].connect(self.open)  # 连接open槽函数
        self.menu_2.triggered[QtWidgets.QAction].connect(self.open)  # 连接open槽函数)
        self.menu_3.triggered[QtWidgets.QAction].connect(self.open)  # 连接open槽函数)
        self.menu_4.triggered[QtWidgets.QAction].connect(self.open)  # 连接open槽函数)
        self.database = Database()
        self.cursor = self.database.cursor
        self.conn = self.database.conn
        self.login_ok = True

        # self.box_id.stateChanged.connect(self.searchEvent)
        # self.box_name.stateChanged.connect(self.searchEvent)
        self.button_search.clicked.connect(self.searchEvent)
        self.button_delete.clicked.connect(self.deleteSql)
        
    def searchEvent(self):
        try:
            if self.box_id.isChecked():
                column_name = 'id'
            elif self.box_name.isChecked():
                column_name = eval('self.database.'+self.object)[1]
            text = self.lineEdit.text()
            if text == '':
                msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '搜索框为空，请输入信息！')
                msg_box.exec_()
                return
            sql = "select * from " + self.object + ' where ' + column_name + "='" + text + "'"
            print(sql)
            self.cursor.execute(sql)
            ret = np.array(self.cursor.fetchall())
            self.data_temp = ret
            # 清空表单
            self.cellEventEnable(False)
            self.table.clearContents()
            self.table.setRowCount(0)
            # 显示在表格控件中
            a = 0
            for data in ret:
                a += 1
                self.table.insertRow(0)
                time.sleep(0.01)
                for j in range(len(data)):
                    if j>=len(self.database.yuangong):
                        continue
                    item_value = str(data[j])
                    newItem = QTableWidgetItem(item_value)
                    self.table.setItem(0, j, newItem)
            self.cellEventEnable(True)
        except:
            pass
        
    def deleteSql(self):
        selected_items = self.table.selectedItems()
        if len(selected_items)==0:
            return
        row = selected_items[0].row() 
        id = self.table.item(row,0).text()
        datanum = self.table.item(row,2).text()

        reply = QMessageBox.question(self, '确认', '是否确认删除\''+datanum+'\'这条数据？',
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.No:
            return
        sql = "delete from "+ self.object + ' where id = '+str(id) + ';'
        print(sql)
        self.cursor.execute(sql)
        self.conn.commit()
        self.table_show(self.object)

    


    def table_show(self,object):
        self.object = object
        # 表的初始化/设置表头
        #self.cellEventEnable(False)
        obj = eval('self.database.ch_'+object)
        self.table.setColumnCount(len(obj))  
        self.table.setHorizontalHeaderLabels(obj)
        self.cellEventEnable(True)
        # 清空表单
        self.cellEventEnable(False)
        self.table.clearContents()
        self.table.setRowCount(0)
        # 生成sql语句并提取执行结果
        sql = 'select * from '+object
        print(sql)
        self.cursor.execute(sql)
        ret = np.array(self.cursor.fetchall())
        self.data_temp = ret
        # 显示在表格控件中
        a = 0
        for data in ret:
            a += 1
            self.table.insertRow(0)
            time.sleep(0.01)
            for j in range(len(data)):
                if j>=len(self.database.yuangong):
                    continue
                item_value = str(data[j])
                newItem = QTableWidgetItem(item_value)
                self.table.setItem(0, j, newItem)
        self.cellEventEnable(True)
    
    def table_insert(self,object):
        self.insert = Insert(object)
        self.insert.show()
        
        self.insert.pushButton_add.clicked.connect(self.table_insert_ok)  # 设置查询按钮的回调函数
        # self.gui_upload.buttonSelect.clicked.connect(self.uploadSelectFiles)

    def table_insert_ok(self):
        # 生成sql语句并提取执行结果
        sql = self.insert.getInfo()
        print(sql)
        if not sql:
            return
   
        self.cursor.execute(sql)
        self.conn.commit()
        self.table_show(self.object)



    def open(self, m):
        print(m.text())
        if m.text() == "员工信息浏览":
            self.table_show('yuangong')
        elif m.text() == "员工信息维护":
            pass
        elif m.text() == "员工信息添加":
            self.table_insert('yuangong')
            pass
        elif m.text() == "伤亡信息浏览":
            self.table_show('zhiyeshangwang')
            pass
        elif m.text() == "伤亡信息添加":
            self.table_insert('zhiyeshangwang')
            pass
        elif m.text() == "伤亡信息维护":
            pass

        elif m.text() == "职业危害信息浏览":
            self.table_show('zhiyeweihai')
            pass

        elif m.text() == "职业危害信息添加":
            self.table_insert('zhiyeweihai')
            pass
        elif m.text() == "职业危害信息维护":
            pass
        elif m.text() == "退出系统":
            exit()

    def cellEventEnable(self, flag):
        if flag:
            self.table.cellChanged.connect(self.cellchange)
        else:
            self.table.cellChanged.disconnect()
    def cellchange(self,row,col):
        self.cursor.execute('select * from '+self.object)
        ret = np.array(self.cursor.fetchall())

        data = ret[-(row+1)]
        data_id = str(data[0])
        reply = QMessageBox.question(self, '确认', '是否确认更改编号\''+data_id+'\'这条数据？',
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.No:
            self.table_show()
            return
        data_key = eval('self.database.'+self.object)[col]
        data_content = self.table.item(row,col).text()
        data_content_origin = str(data[col])

        if False:
            print('[id-'+data_id+',key-'+data_key+']  不符合数据格式要求，修改失败')
            self.cellEventEnable(False)
            self.tableShow.item(row,col).setText(data_content_origin)
            self.cellEventEnable(True)
            return

        base = "update " + self.object +' set '
        sql = base + data_key+'=\''+data_content+'\' where '+eval('self.database.'+self.object)[0]+'='+data_id+';'
        print(sql)
        self.cursor.execute(sql)
        self.conn.commit()
        print('[id-'+data_id+',key-'+data_key+']  修改成功')
        #print(data_id,data_key,data_content)
        #print(self.keys_name)
       # self.settext('第%s行，第%s列 , 数据改变为:%s'%(row,col,txt))
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    stylesheet = qdarkstyle.load_stylesheet_pyqt5()
    app.setFont(QFont("微软雅黑", 9))
    app.setWindowIcon(QIcon("icon.ico"))
    app.setStyleSheet(stylesheet)
    gui = GUI()
    #app.setStyleSheet("#MainWindow{border-image:url(1.jpg);}")
    # app.setStyleSheet("background-image: url(:/jpg/1.jpg);\n"
    #     "font: 12pt \"微软雅黑\";")


    
    gui.show()
    sys.exit(app.exec_())
